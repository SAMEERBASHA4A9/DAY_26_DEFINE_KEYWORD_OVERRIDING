‚úÖ Key Takeaways on `define in Verilog
1Ô∏è‚É£ Preprocessor Directive:

`define is a macro, processed before compilation, not during simulation.
2Ô∏è‚É£ Global Scope:

Once defined, it applies to the entire file and cannot be redefined inside a module.
3Ô∏è‚É£ No Direct Overriding Inside a Module:

You cannot override `define inside a module, as it is expanded before synthesis/simulation.
4Ô∏è‚É£ Use `undef to Remove a Macro:

verilog
`define WIDTH 8  
`undef WIDTH  
`define WIDTH 16  

Must be done before using the macro in the file.
5Ô∏è‚É£ Alternative: Use Parameters for Overriding:

Unlike `define, parameters can be overridden per module instance.

verilog
module test #(parameter WIDTH = 8);  
6Ô∏è‚É£ No Runtime Modifications:

`define macros are fixed at compile-time and cannot be changed dynamically during simulation.
7Ô∏è‚É£ File Scope (No Hierarchical Definition):

A macro defined in one file is not automatically available in another file unless included using `include.
8Ô∏è‚É£ Better for Constants, Not Configurations:

Use define for **constants** and parameter for configurable values.
üí° Best Practice:
‚úÖ Use `define for global constants (e.g., opcode values, fixed sizes).
‚úÖ Use parameters when you need flexibility at the module level.
